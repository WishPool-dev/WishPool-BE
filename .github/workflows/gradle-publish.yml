name: wishpool CICD

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: asia-northeast3
  IMAGE_NAME: wishpool-app

jobs:
  # Job 1: Gradle로 JAR 파일 빌드
  build-jar:
    name: Build JAR with Gradle
    runs-on: ubuntu-latest
    
    outputs:
      jar_file_name: ${{ steps.get_jar_name.outputs.jar_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Gradle 빌드
        run: |
          ./gradlew build -x test
          echo "=== build/libs 디렉토리 파일 목록 ==="
          ls -lh build/libs/
      
      - name: Get Jar file name
        id: get_jar_name
        run: echo "jar_name=$(basename build/libs/*[!plain].jar)" >> $GITHUB_OUTPUT

      # 빌드된 JAR 파일을 GitHub Artifact에 업로드
      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: wishpool-jar
          path: build/libs/*.jar

  # Job 2: Docker 이미지 빌드 및 푸시
  build-and-push:
    name: Build and Push Docker Image
    needs: build-jar # build-jar 잡이 성공해야 실행됨
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 이전 잡에서 업로드한 JAR 파일을 다운로드
      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: wishpool-jar
          
      - name: debug list workspace
        run: |
          echo "=== workspace tree ==="
          ls -R .
          
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Set up Docker credential for GAR
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev
        
      - name: Check Variables
        run: |
          echo "--- Variable Check ---"
          echo "GCP_PROJECT_ID: ${{ env.GCP_PROJECT_ID }}"
          echo "GAR_LOCATION: ${{ env.GAR_LOCATION }}"
          echo "IMAGE_NAME: ${{ env.IMAGE_NAME }}"
          echo "Full Tag Path: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "----------------------"
          
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
  # GCP 인스턴스 배포 Job은 이전과 동일합니다.
  deploy-to-instance:
    name: GCP 배포
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      # 이 잡에서는 GCP 인증이 더 이상 필요 없습니다.
      - name: SSH 접속 후 deploy.sh 실행
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.GCP_INSTANCE_IP }}
          username: ${{ secrets.GCP_SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/wishpool/WishPool-BE
            git pull
            export DOKCER_DB_PASSWORD=${{ secrets.DOKCER_DB_PASSWORD }}
            export IMAGE_TAG=${{ github.sha }}
            ./scripts/deploy.sh
