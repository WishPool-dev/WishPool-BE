name: wishpool CICD

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: asia-northeast3
  IMAGE_NAME: wishpool-app

jobs:
  # Job 1: Gradle로 JAR 파일 빌드
  build-jar:
    name: Build JAR with Gradle
    runs-on: ubuntu-latest
    
    outputs:
      jar_file_name: ${{ steps.get_jar_name.outputs.jar_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Gradle 빌드
        run: |
          ./gradlew build -x test
          echo "=== build/libs 디렉토리 파일 목록 ==="
          ls -lh build/libs/

      # ✨ [수정] JAR 파일 대신 build 폴더 전체를 아티팩트로 업로드
      - name: Upload build folder
        uses: actions/upload-artifact@v4
        with:
          name: wishpool-build
          path: build/

  # Job 2: Docker 이미지 빌드 및 푸시
  build-and-push:
    name: Build and Push Docker Image
    needs: build-jar # build-jar 잡이 성공해야 실행됨
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ✨ [수정] build 폴더 아티팩트를 다운로드
      - name: Download build folder from build job
        uses: actions/download-artifact@v4
        with:
          name: wishpool-build
          path: build/
          
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Set up Docker credential for GAR
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev
        
      - name: Check Variables
        run: |
          echo "--- Variable Check ---"
          echo "GCP_PROJECT_ID: ${{ env.GCP_PROJECT_ID }}"
          echo "GAR_LOCATION: ${{ env.GAR_LOCATION }}"
          echo "IMAGE_NAME: ${{ env.IMAGE_NAME }}"
          echo "Full Tag Path: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "----------------------"
          
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
  # GCP 인스턴스 배포 Job은 이전과 동일합니다.
  deploy-to-instance:
    name: GCP 배포
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      # 이 잡에서는 GCP 인증이 더 이상 필요 없습니다.
      - name: SSH 접속 후 deploy.sh 실행
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.GCP_INSTANCE_IP }}
          username: ${{ secrets.GCP_SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # 1. 프로젝트 디렉토리로 이동
            cd ~/wishpool/WishPool-BE

            # 2. 최신 코드 가져오기
            git fetch origin
            git reset --hard origin/main
            git pull
            
            # 3. 배포 스크립트에 실행 권한 부여
            chmod +x ./scripts/deploy.sh
            echo '${{ secrets.GCP_CREDENTIALS_JSON }}' > ./gcp-key.json
            # 4. .env.app 파일 생성 (이전과 동일)
            echo "IMAGE_FULL_PATH=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" > .env.app
            echo "DB_URL_PROD=${{ secrets.DB_URL_PROD }}" >> .env.app
            echo "DB_USER_PROD=${{ secrets.DB_USER_PROD }}" >> .env.app
            echo "DB_PROD_PASSWORD=${{ secrets.DB_PROD_PASSWORD }}" >> .env.app
            echo "OAUTH2_KAKAO=${{ secrets.OAUTH2_KAKAO }}" >> .env.app
            echo "OAUTH2_REDIRECT_URL_PROD=${{ secrets.OAUTH2_REDIRECT_URL_PROD }}" >> .env.app
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env.app
            echo "DISCORD_WEBHOOK=${{ secrets.DISCORD_WEBHOOK }}" >> .env.app
            echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}" >> .env.app
            echo "GCP_BUCKET=${{ secrets.GCP_BUCKET }}" >> .env.app
            echo "GCP_CREDENTIALS_LOCATION=file:/app/gcp-key.json" >> .env.app

            # 5. ✨ [핵심] deploy.sh 스크립트에 GAR_LOCATION과 .env.app 파일 경로를 인자로 전달
            ./scripts/deploy.sh "${{ env.GAR_LOCATION }}" "./.env.app"
